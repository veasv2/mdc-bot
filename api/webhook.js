export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    const update = req.body;
    console.log('üì© Mensaje recibido:', JSON.stringify(update, null, 2));

    if (update.message) {
      await procesarMensaje(update.message);
    }

    res.status(200).json({ ok: true });
  } catch (error) {
    console.error('‚ùå Error:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
}

async function procesarMensaje(message) {
  const chatId = message.chat.id;
  const texto = message.text;
  const usuario = message.from;

  console.log(`üë§ Usuario: ${usuario.first_name} (@${usuario.username || usuario.id})`);
  console.log(`üí¨ Mensaje: ${texto}`);

  try {
    // Obtener perfil del usuario desde Google Sheets
    const perfilUsuario = await obtenerPerfilUsuario(usuario);
    
    // Procesar seg√∫n tipo de mensaje
    if (texto?.startsWith('/')) {
      await manejarComando(chatId, texto, usuario, perfilUsuario);
    } 
    else if (message.document) {
      await procesarDocumento(chatId, message.document, usuario, perfilUsuario);
    }
    else if (texto) {
      await procesarTextoLibre(chatId, texto, usuario, perfilUsuario);
    }
  } catch (error) {
    console.error('Error procesando mensaje:', error);
    await enviarMensaje(chatId, '‚ùå Ocurri√≥ un error. Intenta de nuevo.');
  }
}

async function obtenerPerfilUsuario(usuario) {
  try {
    const telegramId = `@${usuario.username || usuario.id}`;
    
    // Obtener token de acceso para Google API
    const accessToken = await obtenerGoogleAccessToken();
    
    // Leer datos del Google Sheet de usuarios
    const response = await fetch(
      `https://sheets.googleapis.com/v4/spreadsheets/${process.env.GOOGLE_SHEETS_USUARIOS_ID}/values/Sheet1`,
      {
        headers: {
          'Authorization': `Bearer ${accessToken}`,
        },
      }
    );

    if (!response.ok) {
      console.log('‚ö†Ô∏è No se pudo acceder al sheet de usuarios, usando perfil por defecto');
      return {
        nombre: usuario.first_name,
        area: 'Externo',
        cargo: 'Ciudadano',
        acceso: 'Guest'
      };
    }

    const data = await response.json();
    const rows = data.values || [];
    
    // Buscar usuario en el sheet
    const userRow = rows.find(row => row[0] === telegramId);
    
    if (userRow) {
      return {
        telegram_id: userRow[0],
        nombre: userRow[1],
        area: userRow[2],
        cargo: userRow[3],
        acceso: userRow[4],
        email: userRow[5] || '',
        telefono: userRow[6] || ''
      };
    } else {
      // Usuario no registrado
      return {
        nombre: usuario.first_name,
        area: 'Externo',
        cargo: 'Ciudadano',
        acceso: 'Guest',
        es_nuevo: true
      };
    }
  } catch (error) {
    console.error('Error obteniendo perfil:', error);
    return {
      nombre: usuario.first_name,
      area: 'Sistema',
      cargo: 'Usuario',
      acceso: 'Guest'
    };
  }
}

async function manejarComando(chatId, comando, usuario, perfil) {
  const saludo = perfil.area !== 'Externo' 
    ? `¬°Hola ${perfil.nombre}! üëã\nüè¢ **${perfil.area}** - *${perfil.cargo}*\n` 
    : `¬°Hola ${perfil.nombre}! üëã\n`;

  switch (comando.split(' ')[0]) {
    case '/start':
      await enviarMensaje(chatId, `${saludo}
üèõÔ∏è **Bienvenido a la Mesa de Partes Digital**
**Municipalidad Distrital de Colca**

üìã **Servicios disponibles:**
‚Ä¢ Registrar documentos oficiales
‚Ä¢ Consultar estado de expedientes  
‚Ä¢ Generar reportes y estad√≠sticas
‚Ä¢ B√∫squedas por criterios

**Comandos:**
/enviar - Registrar documento
/estado - Consultar expediente  
/reportes - Ver estad√≠sticas
/perfil - Ver mi informaci√≥n
/help - Ayuda completa

**¬øEn qu√© puedo ayudarte?**`);
      break;

    case '/perfil':
      await enviarMensaje(chatId, `üë§ **Tu perfil en el sistema:**

**Nombre:** ${perfil.nombre}
**√Årea:** ${perfil.area}
**Cargo:** ${perfil.cargo}
**Nivel de acceso:** ${perfil.acceso}
${perfil.email ? `**Email:** ${perfil.email}` : ''}
${perfil.telefono ? `**Tel√©fono:** ${perfil.telefono}` : ''}

${perfil.es_nuevo ? '‚ö†Ô∏è *Perfil no registrado - acceso limitado*' : '‚úÖ *Perfil verificado*'}`);
      break;

    case '/enviar':
      const permisos = perfil.acceso !== 'Guest' 
        ? 'Tienes permisos para registrar documentos oficiales.' 
        : 'Como usuario externo, puedes enviar solicitudes ciudadanas.';
        
      await enviarMensaje(chatId, `üì§ **Registro de documento**
${perfil.area !== 'Externo' ? `*√Årea: ${perfil.area}*` : ''}

${permisos}

**Env√≠a tu archivo** (PDF, Word, imagen) y yo lo procesar√© autom√°ticamente.

*Formatos: PDF, DOC, DOCX, JPG, PNG (m√°x. 20MB)*`);
      break;

    case '/estado':
      await enviarMensaje(chatId, `üîç **Consulta de expedientes**

Env√≠a el n√∫mero de expediente:
**Formato:** 2025-0001

O describe el documento que buscas.`);
      break;

    case '/reportes':
      if (['Admin', 'Super'].includes(perfil.acceso)) {
        await enviarMensaje(chatId, `üìä **Reportes administrativos**
*Disponible para: ${perfil.cargo}*

**Selecciona un reporte:**
1Ô∏è‚É£ Documentos del d√≠a
2Ô∏è‚É£ Expedientes pendientes
3Ô∏è‚É£ Reporte semanal  
4Ô∏è‚É£ Estad√≠sticas por √°rea
5Ô∏è‚É£ Mi √°rea (${perfil.area})

Responde con el n√∫mero.`);
      } else {
        await enviarMensaje(chatId, `üìä **Mis documentos**

**Estad√≠sticas personales:**
‚Ä¢ Documentos enviados: En desarrollo
‚Ä¢ Expedientes pendientes: En desarrollo
‚Ä¢ √öltima actividad: Hoy

*Reportes administrativos disponibles solo para jefes de √°rea*`);
      }
      break;

    default:
      await enviarMensaje(chatId, `‚ùì Comando: ${comando}

**Comandos disponibles:**
/start - Inicio
/enviar - Registrar documento
/estado - Consultar expediente
/reportes - Estad√≠sticas
/perfil - Mi informaci√≥n
/help - Ayuda`);
  }
}

async function procesarDocumento(chatId, documento, usuario, perfil) {
  console.log(`üìÑ Procesando: ${documento.file_name} (${documento.file_size} bytes)`);

  try {
    // Analizar documento con Claude API
    const analisis = await analizarDocumentoConClaude(documento, perfil);
    
    // Registrar en Google Sheets
    const expediente = await registrarEnGoogleSheets(documento, analisis, usuario, perfil);

    await enviarMensaje(chatId, `‚úÖ **Documento registrado exitosamente**

üìã **Expediente:** ${expediente.numero}
**Fecha:** ${expediente.fecha}
**Estado:** ${expediente.estado}

üìÑ **Archivo:** ${documento.file_name}
**Tama√±o:** ${Math.round(documento.file_size / 1024)} KB
**Tipo detectado:** ${analisis.tipo}

üè¢ **Asignado a:** ${analisis.area_responsable}
**Prioridad:** ${analisis.prioridad}

${analisis.observaciones ? `**Observaciones:** ${analisis.observaciones}` : ''}

**Para seguimiento:** /estado ${expediente.numero}
**Tiempo estimado:** ${analisis.tiempo_estimado}`);

    // Si es documento importante, notificar al √°rea
    if (['Admin', 'Super'].includes(perfil.acceso)) {
      console.log(`üîî Notificaci√≥n enviada a ${analisis.area_responsable}`);
    }

  } catch (error) {
    console.error('Error procesando documento:', error);
    await enviarMensaje(chatId, `‚ùå **Error procesando documento**

No se pudo procesar ${documento.file_name}.
Intenta nuevamente o contacta soporte.

**Posibles causas:**
‚Ä¢ Archivo muy grande (m√°x. 20MB)
‚Ä¢ Formato no soportado
‚Ä¢ Error temporal del sistema`);
  }
}

async function analizarDocumentoConClaude(documento, perfil) {
  // Simular an√°lisis inteligente por ahora
  // Aqu√≠ integrar√≠amos con Claude API para an√°lisis real del contenido
  
  const tiposPorExtension = {
    'pdf': { tipo: 'Documento PDF', area: 'Secretar√≠a General' },
    'doc': { tipo: 'Documento Word', area: 'Administraci√≥n' },
    'docx': { tipo: 'Documento Word', area: 'Administraci√≥n' },
    'jpg': { tipo: 'Imagen escaneada', area: 'Mesa de Partes' },
    'png': { tipo: 'Documento digitalizado', area: 'Mesa de Partes' }
  };

  const extension = documento.file_name?.split('.').pop()?.toLowerCase();
  const tipoBase = tiposPorExtension[extension] || { tipo: 'Documento', area: 'Mesa de Partes' };

  // L√≥gica inteligente seg√∫n √°rea del usuario
  let areaResponsable = perfil.area !== 'Externo' ? perfil.area : tipoBase.area;
  let prioridad = perfil.acceso === 'Super' ? 'Alta' : 'Media';

  // Detectar urgencia por nombre de archivo
  if (documento.file_name?.toLowerCase().includes('urgente')) {
    prioridad = 'Muy Urgente';
  }

  return {
    tipo: tipoBase.tipo,
    area_responsable: areaResponsable,
    prioridad: prioridad,
    tiempo_estimado: prioridad === 'Muy Urgente' ? '24 horas' : '3-5 d√≠as h√°biles',
    observaciones: `Enviado por ${perfil.cargo} de ${perfil.area}`,
    asunto_detectado: `Documento ${tipoBase.tipo.toLowerCase()}`
  };
}

async function registrarEnGoogleSheets(documento, analisis, usuario, perfil) {
  try {
    const accessToken = await obtenerGoogleAccessToken();
    const ahora = new Date();
    
    // Generar n√∫mero de expediente √∫nico
    const numeroExpediente = `2025-${String(ahora.getMonth() + 1).padStart(2, '0')}${String(ahora.getDate()).padStart(2, '0')}${String(ahora.getHours()).padStart(2, '0')}${String(ahora.getMinutes()).padStart(2, '0')}${String(ahora.getSeconds()).padStart(2, '0')}`;
    
    // Preparar datos para el sheet
    const nuevaFila = [
      numeroExpediente,
      ahora.toLocaleDateString('es-PE') + ' ' + ahora.toLocaleTimeString('es-PE', {hour: '2-digit', minute: '2-digit'}),
      `${perfil.nombre} (${perfil.area})`,
      analisis.asunto_detectado,
      analisis.tipo,
      analisis.area_responsable,
      'Recibido',
      analisis.prioridad,
      analisis.observaciones,
      `@${usuario.username || usuario.id}`,
      documento.file_name
    ];

    // Agregar fila al Google Sheet
    const response = await fetch(
      `https://sheets.googleapis.com/v4/spreadsheets/${process.env.GOOGLE_SHEETS_EXPEDIENTES_ID}/values/Sheet1:append?valueInputOption=RAW`,
      {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${accessToken}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          values: [nuevaFila]
        })
      }
    );

    if (!response.ok) {
      throw new Error('Error escribiendo en Google Sheets');
    }

    console.log('‚úÖ Expediente registrado en Google Sheets');

    return {
      numero: numeroExpediente,
      fecha: ahora.toLocaleDateString('es-PE'),
      estado: 'Recibido'
    };

  } catch (error) {
    console.error('Error registrando en Google Sheets:', error);
    throw error;
  }
}

async function procesarTextoLibre(chatId, texto, usuario, perfil) {
  // Detectar n√∫mero de expediente
  if (texto.match(/2025-\d{10}/)) {
    await consultarExpediente(chatId, texto.trim(), perfil);
    return;
  }

  // Responder a opciones de reportes
  if (['1', '2', '3', '4', '5'].includes(texto.trim())) {
    await generarReporte(chatId, texto.trim(), perfil);
    return;
  }

  // Respuesta inteligente general
  await enviarMensaje(chatId, `üí≠ Recib√≠: "${texto}"

**¬øQu√© puedes hacer?**
‚Ä¢ Enviar un archivo para registrarlo
‚Ä¢ Consultar expediente: 2025-XXXXXXXXXX
‚Ä¢ Ver reportes: /reportes
‚Ä¢ Ayuda: /help

¬øEn qu√© m√°s puedo ayudarte?`);
}

async function consultarExpediente(chatId, numeroExp, perfil) {
  // Simular consulta por ahora
  await enviarMensaje(chatId, `üîç **Consultando:** ${numeroExp}

üìã **Resultado:**
**Estado:** ‚úÖ En proceso  
**√Årea:** Obras y Desarrollo
**Fecha registro:** 19/07/2025
**√öltima actualizaci√≥n:** Hoy 14:30

**Historial:**
üü¢ Recibido (09:15)
üü° En revisi√≥n (10:30)
üîµ Derivado a √°rea t√©cnica (14:30)

**Pr√≥ximo paso:** Evaluaci√≥n (2-3 d√≠as)

${['Admin', 'Super'].includes(perfil.acceso) ? '\n**Acciones disponibles:** /aprobar /derivar /observar' : ''}`);
}

async function generarReporte(chatId, opcion, perfil) {
  const reportes = {
    '1': `üìà **Documentos del d√≠a** - ${new Date().toLocaleDateString()}

**Resumen general:**
‚Ä¢ Total recibidos: 12 docs
‚Ä¢ Procesados: 9
‚Ä¢ Pendientes: 3

**Por √°rea:**
üèóÔ∏è Obras: 5 docs
üèõÔ∏è Alcald√≠a: 3 docs  
üí∞ Administraci√≥n: 4 docs

**Tu √°rea (${perfil.area}):**
‚Ä¢ Recibidos: 2
‚Ä¢ Procesados: 1
‚Ä¢ Pendientes: 1`,

    '5': `üìä **Reporte ${perfil.area}**

**Esta semana:**
‚Ä¢ Documentos: 8
‚Ä¢ Procesados: 6
‚Ä¢ Pendientes: 2
‚Ä¢ Tiempo promedio: 2.3 d√≠as

**Tipos m√°s frecuentes:**
üìÑ Informes: 4
üìã Solicitudes: 3  
üìù Oficios: 1`
  };

  const reporte = reportes[opcion] || `üìä Reporte ${opcion} no disponible`;
  await enviarMensaje(chatId, reporte);
}

async function obtenerGoogleAccessToken() {
  try {
    // Crear JWT para autenticaci√≥n
    const jwt = await crearJWT();
    
    const response = await fetch('https://oauth2.googleapis.com/token', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
      },
      body: `grant_type=urn:ietf:params:oauth:grant-type:jwt-bearer&assertion=${jwt}`
    });

    const data = await response.json();
    
    if (!data.access_token) {
      throw new Error('No se pudo obtener access token');
    }

    return data.access_token;
  } catch (error) {
    console.error('Error obteniendo access token:', error);
    throw error;
  }
}

async function crearJWT() {
  // Implementaci√≥n simplificada de JWT para Google API
  // En producci√≥n usar√≠as una librer√≠a como jsonwebtoken
  const header = {
    "alg": "RS256",
    "typ": "JWT"
  };

  const now = Math.floor(Date.now() / 1000);
  const payload = {
    "iss": process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL,
    "scope": "https://www.googleapis.com/auth/spreadsheets https://www.googleapis.com/auth/drive.file",
    "aud": "https://oauth2.googleapis.com/token",
    "exp": now + 3600,
    "iat": now
  };

  // Para esta demo, retornamos un token mock
  // En producci√≥n necesitar√≠as firmar con la private key
  return 'jwt_token_placeholder';
}

async function enviarMensaje(chatId, texto) {
  const TELEGRAM_API = `https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}`;
  
  try {
    const response = await fetch(`${TELEGRAM_API}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: texto,
        parse_mode: 'Markdown'
      })
    });

    const result = await response.json();
    
    if (!result.ok) {
      console.error('Error enviando mensaje:', result);
    } else {
      console.log('‚úÖ Mensaje enviado');
    }
    
    return result;
  } catch (error) {
    console.error('‚ùå Error en enviarMensaje:', error);
    throw error;
  }
}