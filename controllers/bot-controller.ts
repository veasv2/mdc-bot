// src/controllers/BotController.ts - Controlador principal del bot

import { TelegramMessage, UsuarioCompleto, ComandoBot } from '../types';
import { UsuarioService } from 'services/usuario-service';
import { TelegramService } from 'services/telegram-service';
import { ExpedienteService } from 'services/expediente-service';
import { AnalisisService } from 'services/analisis-service';
import { CommandHandler } from 'handlers/command-handler';
import { DocumentHandler } from 'handlers/document-handler';
import { config } from '../config';

export class BotController {
  private usuarioService: UsuarioService;
  private telegramService: TelegramService;
  private expedienteService: ExpedienteService;
  private analisisService: AnalisisService;
  private commandHandler: CommandHandler;
  private documentHandler: DocumentHandler;

  constructor() {
    this.usuarioService = new UsuarioService();
    this.telegramService = new TelegramService();
    this.expedienteService = new ExpedienteService();
    this.analisisService = new AnalisisService();
    this.commandHandler = new CommandHandler(this.usuarioService, this.telegramService, this.expedienteService);
    this.documentHandler = new DocumentHandler(
      this.telegramService, 
      this.expedienteService, 
      this.analisisService, 
      this.usuarioService
    );
  }

  /**
   * Procesa un mensaje de Telegram
   */
  async procesarMensaje(message: TelegramMessage): Promise<void> {
    const chatId = message.chat.id;
    const texto = message.text;
    const usuario = message.from;

    try {
      // Log del mensaje
      console.log('üîÑ Procesando mensaje:', {
        usuario: `${usuario.first_name} (@${usuario.username || usuario.id})`,
        texto: texto || 'sin texto',
        adjuntos: {
          documento: !!message.document,
          foto: !!message.photo,
          video: !!message.video,
          audio: !!message.audio || !!message.voice
        }
      });

      // Obtener perfil del usuario
      const perfilUsuario = await this.usuarioService.obtenerPerfilUsuario(usuario);
      
      // Enviar estado de "escribiendo"
      await this.telegramService.enviarEstadoTyping(chatId);

      // Determinar tipo de mensaje y procesar
      if (texto?.startsWith('/')) {
        // Comando
        await this.commandHandler.manejarComando(chatId, texto as ComandoBot, usuario, perfilUsuario);
      }
      else if (message.document) {
        // Documento
        await this.documentHandler.procesarDocumento(chatId, message.document, usuario, perfilUsuario, 'documento');
      }
      else if (message.photo) {
        // Foto - tomar la de mayor resoluci√≥n
        const foto = message.photo[message.photo.length - 1];
        await this.documentHandler.procesarDocumento(chatId, foto, usuario, perfilUsuario, 'foto');
      }
      else if (message.video) {
        // Video (no procesamos pero informamos)
        await this.telegramService.enviarMensaje(chatId, 
          '‚ùå **Videos no soportados**\n\nActualmente solo procesamos:\n‚Ä¢ üìÑ Documentos PDF\n‚Ä¢ üì∏ Im√°genes\n\n¬øPodr√≠as enviar tu documento como PDF o imagen?'
        );
      }
      else if (message.audio || message.voice) {
        // Audio (no procesamos pero informamos)
        await this.telegramService.enviarMensaje(chatId,
          '‚ùå **Audio no soportado**\n\nActualmente solo procesamos:\n‚Ä¢ üìÑ Documentos PDF\n‚Ä¢ üì∏ Im√°genes\n\n¬øPodr√≠as enviar tu documento como PDF o imagen?'
        );
      }
      else if (texto) {
        // Texto libre
        await this.procesarTextoLibre(chatId, texto, usuario, perfilUsuario);
      }
      else {
        // Tipo de mensaje no reconocido
        await this.telegramService.enviarMensaje(chatId, `ü§î **Tipo de mensaje no reconocido**

**Puedo procesar:**
‚Ä¢ üìÑ Documentos PDF
‚Ä¢ üì∏ Fotos e im√°genes
‚Ä¢ üí¨ Mensajes de texto
‚Ä¢ ‚ö° Comandos (/start, /perfil, etc.)

¬øPodr√≠as enviar tu archivo nuevamente?`);
      }

    } catch (error) {
      console.error('‚ùå Error procesando mensaje:', error);
      
      await this.telegramService.enviarMensaje(chatId, 
        '‚ùå **Error temporal del sistema**\n\nIntenta de nuevo en unos momentos.\n\nSi el problema persiste, contacta al administrador.'
      );
    }
  }

  /**
   * Procesa texto libre (consultas, n√∫meros de expediente, etc.)
   */
  private async procesarTextoLibre(
    chatId: number, 
    texto: string, 
    usuario: any, 
    perfil: UsuarioCompleto
  ): Promise<void> {
    const textoLimpio = texto.trim();

    // Verificar si es un n√∫mero de expediente
    if (textoLimpio.match(/2025-\d{10}/)) {
      await this.consultarExpediente(chatId, textoLimpio, perfil);
      return;
    }

    // Verificar si es una opci√≥n de reporte (n√∫meros 1-5)
    if (['1', '2', '3', '4', '5'].includes(textoLimpio)) {
      await this.commandHandler.generarReporte(chatId, textoLimpio, perfil);
      return;
    }

    // Verificar si es una b√∫squeda
    if (textoLimpio.toLowerCase().includes('buscar') || textoLimpio.toLowerCase().includes('expediente')) {
      await this.telegramService.enviarMensaje(chatId, `üîç **B√∫squeda de expedientes**

Para buscar un expediente espec√≠fico, env√≠a el n√∫mero completo:
**Formato:** 2025-XXXXXXXXXX

**Ejemplo:** 2025-0107162830

¬øTienes el n√∫mero del expediente que buscas?`);
      return;
    }

    // Respuesta gen√©rica para texto libre
    await this.telegramService.enviarMensaje(chatId, `üí≠ Recib√≠: "${texto}"

**¬øQu√© puedes hacer?**
‚Ä¢ **Enviar archivo:** Para registrar documento
‚Ä¢ **Consultar expediente:** 2025-XXXXXXXXXX
‚Ä¢ **Ver reportes:** /reportes
‚Ä¢ **Ayuda completa:** /help

¬øEn qu√© m√°s puedo ayudarte?`);
  }

  /**
   * Consulta un expediente espec√≠fico
   */
  private async consultarExpediente(chatId: number, numeroExp: string, perfil: UsuarioCompleto): Promise<void> {
    try {
      await this.telegramService.enviarEstadoTyping(chatId);
      
      const expediente = await this.expedienteService.buscarExpedientePorNumero(numeroExp);
      
      if (!expediente) {
        await this.telegramService.enviarMensaje(chatId, `‚ùå **Expediente no encontrado**

**N√∫mero consultado:** ${numeroExp}

**Posibles causas:**
‚Ä¢ N√∫mero incorrecto
‚Ä¢ Expediente muy reciente (a√∫n proces√°ndose)
‚Ä¢ Error de tipeo

**Formato correcto:** 2025-XXXXXXXXXX`);
        return;
      }

      // Mostrar informaci√≥n del expediente
      await this.telegramService.enviarMensaje(chatId, `üìã **Expediente encontrado**

**üìã N√∫mero:** ${numeroExp}
**üìÑ C√≥digo:** ${expediente.doc}
**üìÖ Fecha recepci√≥n:** ${expediente.fecha_recepcion} ${expediente.hora}
**üë§ Emisor:** ${expediente.emisor_responsable}
**üè¢ √Årea emisora:** ${expediente.emisor_area}

**üìã Estado actual:** ${expediente.estado}
**‚ö° Prioridad:** ${expediente.prioridad}
**üìù Asunto:** ${expediente.asunto}

${expediente.derivado_area ? `**üîÑ Derivado a:** ${expediente.derivado_area}` : ''}
${expediente.derivado_responsable ? `**üë§ Responsable:** ${expediente.derivado_responsable}` : ''}

**üìä Tipo:** ${expediente.tipo_documento} (${expediente.folios} folio${expediente.folios > 1 ? 's' : ''})`);

    } catch (error) {
      console.error('Error consultando expediente:', error);
      await this.telegramService.enviarMensaje(chatId, `‚ùå **Error consultando expediente**

No se pudo acceder a la informaci√≥n en este momento.

Intenta nuevamente en unos minutos.`);
    }
  }

  /**
   * Verifica el estado del sistema
   */
  async verificarEstado(): Promise<{
    telegram: boolean;
    google_sheets: boolean;
    configuracion: boolean;
    servicios: boolean;
  }> {
    try {
      return {
        telegram: !!config.telegramToken,
        google_sheets: (await this.usuarioService.obtenerTodosLosUsuarios()).length >= 0,
        configuracion: config.isConfigured(),
        servicios: true
      };
    } catch (error) {
      console.error('Error verificando estado:', error);
      return {
        telegram: false,
        google_sheets: false,
        configuracion: false,
        servicios: false
      };
    }
  }
}